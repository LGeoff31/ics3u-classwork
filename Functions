Win or loss

result = input('Please enter your result: ')
def outcome_message(result: str) -> str:
    """Creates a message based on the player's outcome.
    
    Args:
        result: Either 'win' or 'lose'.
    
    

    Returns:
        An appropriate message based on the player's outcome.
    """

    if result == "win":
        return "You have won."
    else:
        return "You have lost."

print(outcome_message(result))

find hiden letters

from random import randint

from typing import List

from words import WORD_LIST


def main():
    ATTEMPTS_ALLOWED = 6

    secret_word = get_random_word(WORD_LIST)

    correct_guesses = []
    incorrect_guesses = []
    lives = calc_attempts_remaining(ATTEMPTS_ALLOWED, incorrect_guesses)

    result = None
    while result is None:

        # display lives left
        print_lives_left(lives, ATTEMPTS_ALLOWED)

        # display hidden word
        blanked_word = reveal_letters(secret_word, correct_guesses)
        print(blanked_word)
        print()

        # get guess
        guess = get_guess(correct_guesses + incorrect_guesses)

        if letter_is_in_word(guess, secret_word):
            print("That is correct!")
            correct_guesses.append(guess)
        else:
            print("Incorrect.")
            incorrect_guesses.append(guess)
        
        lives = calc_attempts_remaining(ATTEMPTS_ALLOWED, incorrect_guesses)
        
        if all_letters_present_in_list(secret_word, correct_guesses):
            result = "win"
        elif lives <= 0:
            result = "lose"

    print(word_reveal_message(secret_word))
    print(outcome_message(result))

i = 0
def reveal_letters(word: str, visible_letters: list) -> str:
    """Reveal the given letters in a hidden word.
    
    Args:
        word: The word whose letters need to be revealed.
        visible_letters: A list of letters that should be visible in the word.
    
    Returns:
        The word with visible letters shown and all others blanked-out.
    
    Example:
        If the word is "hello" and visible_letters is the list ['e', 'o'],
        The resulting string would be "_ e _ _ o". Separate each character
        with a space to make it easier to read.
    """
    hidden_word = " "
    while i <= len(word):
        if word[i] in visible_letters:
            hidden_word += letter
        else:
            hidden_word += "_"
        hidden_word += ""
        i += 1
    return hidden_word.strip()
print(reveal_letters('hippo', 'o'))
    
secret word reveal 

def word_reveal_message(word: str) -> str:
    """Creates a message revealing the secret word.
    
    Args:
        word: the word being revealed.
    
    Returns:
        A message revealing the secret word.
    
    Example: 
        "The secret word was 'orange'."
    """
    return f"The secret word was {word}."
print(word_reveal_message('bananarama'))

guess remaining 

def calc_attempts_remaining(attempts_allowed: int, incorrect: int) -> int:
    """Determine the number of guesses remaining.

    Based on the initial number of allowed attempts and the number
    of incorrect guesses.
    
    Args:
        attempts_allowed: The number of total allowed guesses.
        incorrect: A list containing all the incorrect guesses.
    
    Returns:
        How many remaining guesses the player has.
    """
    remaining_attempts = attempts_allowed - incorrect
    return remaining_attempts
print(calc_attempts_remaining(int(input('Enter attempts allowed: ')),int(input('Enter incorrect attempts: '))))

import random
def get_guess(all_guesses):
  alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

  for i in all_guesses:
    if len(i) == 1:
      if alphabet.count(i) == 1:
        alphabet.remove(i)
        return alphabet[randint(0,len(alphabet))]

  """Gets a valid guess from the player.
    
    This function will ensure:
        - The user enters a single character.
        - The user enters a letter not already guessed.
        - The user enters a valid letter (use str.isalpha())
    
    Args:
        all_guesses: A list of all prervious guesses.
    
    Returns:
        A single letter, not already guessed.
  """

print(get_guess(['k', 'j', 'l', 'p']))

def letter_is_in_word(letter: str, word: str) -> bool:
    return letter in word
    """Determines if a given letter is in a word.
    
    Args:
        letter: The letter to search for.
        word: The word to search.
    
    Returns:
        True if the letter is in the word, False otherwise.
    """
    pass

def all_letters_present_in_list(word: str, letter_list: List[str]) -> bool:
    for i in range(len(word)):
        if word[i] not in letter_list:
            return False
    return True
    """Determines if all a word's letters are in a given list.
    
    For every letter in the given word, is it present in the
    given list of letters? True if so.

    Args:
        word: The word to check.
        letter_list: The letters of the word
    
    Returns:
        True if all the letters in the word are in the list of letters.
    """
    pass

if __name__ == "__main__":
    main()
